// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  avatarUrl     String?
  createdAt     DateTime @default(now())
  memberships   Membership[]
  ideas         Idea[]
  comments      Comment[]
  votes         Vote[]
  availability  Availability[]
}

model Group {
  id           String        @id @default(cuid())
  name         String
  slug         String        @unique
  createdAt    DateTime      @default(now())
  memberships  Membership[]
  ideas        Idea[]
  trips        Trip[]
  availability Availability[]
}

model Membership {
  id        String  @id @default(cuid())
  role      Role    @default(MEMBER)
  userId    String
  groupId   String
  user      User    @relation(fields: [userId], references: [id])
  group     Group   @relation(fields: [groupId], references: [id])
  @@unique([userId, groupId])
}

model Idea {
  id           String      @id @default(cuid())
  groupId      String
  authorId     String
  title        String
  prompt       String
  tags         String[]
  budgetLevel  Budget?
  monthHint    Int?
  images       Image[]
  palette      Json?
  summary      String?
  status       IdeaStatus  @default(DRAFT)
  createdAt    DateTime    @default(now())
  group        Group       @relation(fields: [groupId], references: [id])
  author       User        @relation(fields: [authorId], references: [id])
  comments     Comment[]
  votes        Vote[]
  trip         Trip?
}

model Image {
  id        String  @id @default(cuid())
  ideaId    String
  url       String
  source    ImageSource
  provider  String?
  order     Int     @default(0)
  idea      Idea    @relation(fields: [ideaId], references: [id])
}

model Comment {
  id        String   @id @default(cuid())
  ideaId    String
  authorId  String
  body      String
  createdAt DateTime @default(now())
  idea      Idea     @relation(fields: [ideaId], references: [id])
  author    User     @relation(fields: [authorId], references: [id])
}

model Vote {
  id        String   @id @default(cuid())
  ideaId    String
  userId    String
  value     VoteValue
  createdAt DateTime  @default(now())
  idea      Idea      @relation(fields: [ideaId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  @@unique([ideaId, userId])
}

model Availability {
  id        String   @id @default(cuid())
  userId    String
  groupId   String
  month     Int
  score     Int
  user      User     @relation(fields: [userId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])
  @@unique([userId, groupId, month])
}

model Trip {
  id         String   @id @default(cuid())
  groupId    String
  ideaId     String   @unique
  title      String
  startDate  DateTime?
  endDate    DateTime?
  budgetNote String?
  tasks      Task[]
  group      Group    @relation(fields: [groupId], references: [id])
  idea       Idea     @relation(fields: [ideaId], references: [id])
}

model Task {
  id        String   @id @default(cuid())
  tripId    String
  title     String
  ownerId   String?
  status    TaskStatus @default(TODO)
  dueDate   DateTime?
  trip      Trip     @relation(fields: [tripId], references: [id])
}

enum Role { 
  OWNER 
  ADMIN 
  MEMBER 
}

enum IdeaStatus { 
  DRAFT 
  PUBLISHED 
  PROMOTED 
  ARCHIVED 
}

enum Budget { 
  LOW 
  MEDIUM 
  HIGH 
}

enum ImageSource { 
  AI 
  STOCK 
}

enum VoteValue { 
  UP 
  MAYBE 
  DOWN 
}

enum TaskStatus { 
  TODO 
  DOING 
  DONE 
}