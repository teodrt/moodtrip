// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  avatarUrl     String?
  createdAt     DateTime @default(now())
  memberships   Membership[]
  ideas         Idea[]
  comments      Comment[]
  votes         Vote[]
  availability  Availability[]
  
  // NextAuth.js fields
  accounts      Account[]
  sessions      Session[]
  
  // Advanced features
  notifications Notification[]
  notificationPreferences NotificationPreferences?
  pushSubscription PushSubscription?
  analyticsEvents AnalyticsEvent[]
  activities   UserActivity[]
}


model Group {
  id           String        @id @default(cuid())
  name         String
  slug         String        @unique
  createdAt    DateTime      @default(now())
  memberships  Membership[]
  ideas        Idea[]
  trips        Trip[]
  availability Availability[]
  analyticsEvents AnalyticsEvent[]
}

model Membership {
  id        String  @id @default(cuid())
  role      Role    @default(MEMBER)
  userId    String
  groupId   String
  user      User    @relation(fields: [userId], references: [id])
  group     Group   @relation(fields: [groupId], references: [id])
  @@unique([userId, groupId])
}

model Idea {
  id           String      @id @default(cuid())
  groupId      String
  authorId     String
  title        String
  prompt       String
  tags         Json?
  budgetLevel  Budget?
  monthHint    Int?
  images       Image[]
  palette      Json?
  summary      String?
  status       IdeaStatus  @default(DRAFT)
  createdAt    DateTime    @default(now())
  group        Group       @relation(fields: [groupId], references: [id])
  author       User        @relation(fields: [authorId], references: [id])
  comments     Comment[]
  votes        Vote[]
  trip         Trip?
}

model Image {
  id        String  @id @default(cuid())
  ideaId    String
  url       String
  source    ImageSource
  provider  String?
  order     Int     @default(0)
  idea      Idea    @relation(fields: [ideaId], references: [id])
}

model Comment {
  id        String   @id @default(cuid())
  ideaId    String
  authorId  String
  body      String
  createdAt DateTime @default(now())
  idea      Idea     @relation(fields: [ideaId], references: [id])
  author    User     @relation(fields: [authorId], references: [id])
}

model Vote {
  id        String   @id @default(cuid())
  ideaId    String
  userId    String
  value     VoteValue
  createdAt DateTime  @default(now())
  idea      Idea      @relation(fields: [ideaId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  @@unique([ideaId, userId])
}

model Availability {
  id        String   @id @default(cuid())
  userId    String
  groupId   String
  month     Int
  score     Int
  user      User     @relation(fields: [userId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])
  @@unique([userId, groupId, month])
}

model Trip {
  id         String   @id @default(cuid())
  groupId    String
  ideaId     String   @unique
  title      String
  startDate  DateTime?
  endDate    DateTime?
  budgetNote String?
  tasks      Task[]
  group      Group    @relation(fields: [groupId], references: [id])
  idea       Idea     @relation(fields: [ideaId], references: [id])
}

model Task {
  id        String   @id @default(cuid())
  tripId    String
  title     String
  ownerId   String?
  status    TaskStatus @default(TODO)
  dueDate   DateTime?
  trip      Trip     @relation(fields: [tripId], references: [id])
}

enum Role { 
  OWNER 
  ADMIN 
  MEMBER 
}

enum IdeaStatus { 
  DRAFT 
  PUBLISHED 
  PROMOTED 
  ARCHIVED 
}

enum Budget { 
  LOW 
  MEDIUM 
  HIGH 
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Notifications
model Notification {
  id          String   @id @default(cuid())
  userId      String
  type        String   // new_idea, new_vote, new_comment, trip_promoted, group_activity, recommendation, reminder
  title       String
  message     String
  data        String?  // JSON data
  read        Boolean  @default(false)
  priority    String   @default("medium") // low, medium, high, urgent
  actionUrl   String?
  actionText  String?
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read])
  @@index([createdAt])
}

// Notification Preferences
model NotificationPreferences {
  id              String  @id @default(cuid())
  userId          String  @unique
  email           Boolean @default(true)
  push            Boolean @default(true)
  inApp           Boolean @default(true)
  frequency       String  @default("immediate") // immediate, daily, weekly
  newIdea         Boolean @default(true)
  newVote         Boolean @default(true)
  newComment      Boolean @default(true)
  tripPromoted    Boolean @default(true)
  groupActivity   Boolean @default(true)
  recommendations Boolean @default(true)
  reminders       Boolean @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Push Subscriptions
model PushSubscription {
  id           String   @id @default(cuid())
  userId       String
  subscription String   // JSON subscription data
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// Analytics Events
model AnalyticsEvent {
  id        String   @id @default(cuid())
  userId    String?
  groupId   String?
  eventType String   // idea_created, vote_submitted, comment_added, etc.
  eventData String?  // JSON event data
  timestamp DateTime @default(now())
  sessionId String?
  userAgent String?
  ipAddress String?

  user  User?  @relation(fields: [userId], references: [id], onDelete: SetNull)
  group Group? @relation(fields: [groupId], references: [id], onDelete: SetNull)

  @@index([eventType, timestamp])
  @@index([userId, timestamp])
  @@index([groupId, timestamp])
}

// User Activity Tracking
model UserActivity {
  id          String   @id @default(cuid())
  userId      String
  activityType String  // login, logout, idea_created, vote_cast, etc.
  metadata    String?  // JSON metadata
  timestamp   DateTime @default(now())
  ipAddress   String?
  userAgent   String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, timestamp])
  @@index([activityType, timestamp])
}

enum ImageSource { 
  AI 
  STOCK 
}

enum VoteValue { 
  UP 
  MAYBE 
  DOWN 
}

enum TaskStatus { 
  TODO 
  DOING 
  DONE 
}